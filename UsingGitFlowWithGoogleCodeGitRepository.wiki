#summary Using git flow with Google code git repository
#labels Git,git-flow


=Using git flow with Google code git repository=
= Introduction =

The purpose of this article is for me to condense all the information I found online about git, gitflow and Google code that I found useful to me. Your mileage may vary.


= References =

*Helpful links \ Required reading*
  *  Getting Started with Google Code [http://code.google.com/p/support/wiki/GettingStarted]
  *  Getting Started with git-flow [http://yakiloo.com/getting-started-git-flow/]

= Project Purpose = 
After setting up the Google Code project I decided to create a git repo just for this project I'm endeavoring on. I want to take 2 "hello world!" programs written in php and python from creation to "deployment" through a yet to be defined process that will include branching and tagging using the git-glow workflow model and then code reviewing using Gerrit with automated testing and feedback provided by Jenkins. Why do this crazy thing? Well I want to document the process for two main reasons, one so that I can repeat it and two so that I can improve it as time goes on. Advanced warning. As these articles develop they will be very rough and disorganized. Improvements follow article usefulness. Oh yeah, you asked why I'm using a wiki to do this. Well, I like wiki's and I want to be able to make this content into data that can be moderately transportable. I've moved wiki's form spot a to spot b in the past and the sun rose the next day and the earth was still spinning after all was said and done, so I thought I'd be ok doing it for this body of content. 


==Clone the remote git repo at google code==

Run the clone repo git command on the REMOTE repository
<code language="bash">
~/git$ git clone https://senrabc@code.google.com/p/turnthecrank.ci/
</code>

If everything is working you should see something like this output.
<code language="bash">
Cloning into 'turnthecrank.ci'...
remote: Counting objects: 6, done.
remote: Finding sources: 100% (6/6), done.
remote: Total 6 (delta 0)
Unpacking objects: 100% (6/6), done.

</code>

Change directory into the 'turnthecrank.ci' repo you just cloned and do a git-flow init.
<code language="bash">
~/git/turnthecrank.ci$git flow init
</code>
I accept all the defaults by hitting enter and get the following output.
<code language="bash">

Which branch should be used for bringing forth production releases?
   - master
Branch name for production releases: [master] 
Branch name for "next release" development: [develop] 

How to name your supporting branch prefixes?
Feature branches? [feature/] 
Release branches? [release/] 
Hotfix branches? [hotfix/] 
Support branches? [support/] 
Version tag prefix? [] 

</code>

If you run git branch you should now be on your local develop branch for the turnthecrank.ci repo.

<code language="bash">
~/git/turnthecrank.ci$ git branch
</code>
Output from 'git branch' will list all the branches and have a `*` next to the branch you are switched to.
<code language="bash">
* develop
  master
</code>

It's wise at this point to push the new develop repository to the remote on Google Code. This is necessary for following the git flow model of using a develop and master branch. Google code does not have a develop branch by default when you create a new repo. It's a simple matter with git.

<code language="bash">
git push origin develop
</code>